
INCLUDE "../macros.wbasm"

MACRO createStringBuilder, dest
    newAlloc dest, guardedAllocAttr, 8
    newAlloc dest[0]:s32, guardedAllocAttr, 10
    wrt dest[4]:s32, 0
END

MACRO addCharToString, stringBuilder, char
    newArgFrame addCharToString.argsSize
    wrt addCharToString.args.stringBuilder, stringBuilder
    wrt addCharToString.args.char, char
    call addCharToString
END

MACRO addAppDataToString, stringBuilder, startOffset, endOffset
    newArgFrame addAppDataToString.argsSize
    wrt addAppDataToString.args.stringBuilder, stringBuilder
    wrt addAppDataToString.args.startOffset, startOffset
    wrt addAppDataToString.args.endOffset, endOffset
    call addAppDataToString
END

MACRO addTextToString, stringBuilder, text
    newArgFrame addTextToString.argsSize
    wrt addTextToString.args.stringBuilder, stringBuilder
    wrt addTextToString.args.text, text
    call addTextToString
END

MACRO addIntToString, stringBuilder, number
    newArgFrame addIntToString.argsSize
    wrt addIntToString.args.stringBuilder, stringBuilder
    wrt addIntToString.args.number, number
    call addIntToString
END

MACRO finishString, dest, stringBuilder
    newArgFrame finishString.argsSize
    wrt finishString.args.stringBuilder, stringBuilder
    call finishString
    wrt dest, finishString.args.dest
END

MACRO getFileAttrs, dest, fileHandle
    newAlloc dest, guardedAllocAttr, 3
    fileType dest[0]:s8, fileHandle
    fileIsGuarded dest[1]:s8, fileHandle
    hasAdminPerm dest[2]:s8, fileHandle
END

VAR shellHandle, s32
VAR window, s32
VAR displayMessageIndex, s32
VAR promptOptionIndex, s32
VAR promptTextIndex, s32

VAR windowTitle, s32
VAR allFilesTitle, s32
VAR renameTitle, s32
VAR attrToEditTitle, s32
VAR renamedMessage, s32

VAR rootOptions, s32
VAR fileOptions, s32
VAR launchableOptions, s32
VAR attrOptions, s32
VAR permableOptions, s32

FUNC init, wsInit.id, guarded
    VAR shellName, s32
    newTextAlloc shellName, shellNameStart, shellNameEnd
    openFile shellHandle, shellName
    delAlloc shellName
    findFunc displayMessageIndex, shellHandle, wsDisplayWindowMessage.id
    findFunc promptOptionIndex, shellHandle, wsPromptWindowOption.id
    findFunc promptTextIndex, shellHandle, wsPromptWindowText.id
    
    newTextAlloc windowTitle, windowTitleStart, windowTitleEnd
    newTextAlloc allFilesTitle, allFilesTitleStart, allFilesTitleEnd
    newTextAlloc renameTitle, renameTitleStart, renameTitleEnd
    newTextAlloc renamedMessage, renamedMessageStart, renamedMessageEnd
    newTextAlloc attrToEditTitle, attrToEditTitleStart, attrToEditTitleEnd
    
    VAR text, s32
    
    newAlloc rootOptions, guardedAllocAttr, 8
    newTextAlloc text, allFilesOptionStart, allFilesOptionEnd
    wrt rootOptions[0]:s32, text
    newTextAlloc text, volUsageOptionStart, volUsageOptionEnd
    wrt rootOptions[4]:s32, text
    
    newAlloc fileOptions, guardedAllocAttr, 20
    newAlloc launchableOptions, guardedAllocAttr, 24
    newTextAlloc text, launchOptionStart, launchOptionEnd
    wrt launchableOptions[0]:s32, text
    newTextAlloc text, viewInfoOptionStart, viewInfoOptionEnd
    wrt fileOptions[0]:s32, text
    wrt launchableOptions[4]:s32, text
    newTextAlloc text, editAttrsOptionStart, editAttrsOptionEnd
    wrt fileOptions[4]:s32, text
    wrt launchableOptions[8]:s32, text
    newTextAlloc text, renameOptionStart, renameOptionEnd
    wrt fileOptions[8]:s32, text
    wrt launchableOptions[12]:s32, text
    newTextAlloc text, duplicateOptionStart, duplicateOptionEnd
    wrt fileOptions[12]:s32, text
    wrt launchableOptions[16]:s32, text
    newTextAlloc text, deleteOptionStart, deleteOptionEnd
    wrt fileOptions[16]:s32, text
    wrt launchableOptions[20]:s32, text
    
    newAlloc attrOptions, guardedAllocAttr, 8
    newAlloc permableOptions, guardedAllocAttr, 12
    newTextAlloc text, typeOptionStart, typeOptionEnd
    wrt attrOptions[0]:s32, text
    wrt permableOptions[0]:s32, text
    newTextAlloc text, permOptionStart, permOptionEnd
    wrt permableOptions[4]:s32, text
    newTextAlloc text, guardOptionStart, guardOptionEnd
    wrt attrOptions[4]:s32, text
    wrt permableOptions[8]:s32, text
    
    VAR newWindowIndex, s32
    findFunc newWindowIndex, shellHandle, wsNewWindow.id
    newArgFrame wsNewWindow.argsSize
    wrt wsNewWindow.args.title, windowTitle
    callRemote shellHandle, newWindowIndex
    wrt window, wsNewWindow.args.dest
    
    LBL menuLoop
    VAR index, s32
    newArgFrame wsPromptWindowOption.argsSize
    wrt wsPromptWindowOption.args.window, window
    wrt wsPromptWindowOption.args.message, windowTitle
    wrt wsPromptWindowOption.args.options, rootOptions
    callRemote shellHandle, promptOptionIndex
    wrt index, wsPromptWindowOption.args.dest
    jmpE allFilesOption, index, 0
    jmpE volUsageOption, index, 1
    jmp menuLoop
    
    LBL allFilesOption
    call displayAllFiles
    jmp menuLoop
    
    LBL volUsageOption
    call displayVolUsage
    jmp menuLoop
END

FUNC displayAllFiles, 0, guarded
    LBL menuLoop
    VAR fileNames, s32
    VAR index, s16
    VAR shouldBreak, s8
    allFileNames fileNames
    newArgFrame wsPromptWindowOption.argsSize
    wrt wsPromptWindowOption.args.window, window
    wrt wsPromptWindowOption.args.message, allFilesTitle
    wrt wsPromptWindowOption.args.options, fileNames
    callRemote shellHandle, promptOptionIndex
    wrt index, wsPromptWindowOption.args.dest
    jmpNG handleName, 0, index
    wrt shouldBreak, 1
    jmp skipName
    LBL handleName
    mul index, prevArg, 4
    newArgFrame displayFile.argsSize
    wrt displayFile.args.name, fileNames[index]:s32
    call displayFile
    wrt fileNames[index]:s32, displayFile.args.name
    wrt shouldBreak, 0
    LBL skipName
    
    VAR size, s32
    allocSize size, fileNames
    wrt index, 0
    LBL delNameLoop
    jmpNG breakDelName, size, index
    delAlloc fileNames[index]:s32
    add index, prevArg, 4
    jmp delNameLoop
    LBL breakDelName
    delAlloc fileNames
    jmpZ menuLoop, shouldBreak
END

FUNC displayFile, 0, guarded
    ARG name, s32
    
    VAR fileHandle, s32
    VAR fileType, s8
    openFile fileHandle, name
    fileType fileType, fileHandle
    
    LBL menuLoop
    VAR isLaunchable, s8
    VAR isRunning, s8
    wrt isLaunchable, 0
    jmpZ skipLaunchable, fileType
    appIsRunning isRunning, fileHandle
    jmpNZ skipLaunchable, isRunning
    wrt isLaunchable, 1
    LBL skipLaunchable
    
    VAR options, s32
    jmpNZ handleLaunchableOptions, isLaunchable
    wrt options, fileOptions
    jmp skipLaunchableOptions
    LBL handleLaunchableOptions
    wrt options, launchableOptions
    LBL skipLaunchableOptions
    
    VAR index, s8
    newArgFrame wsPromptWindowOption.argsSize
    wrt wsPromptWindowOption.args.window, window
    wrt wsPromptWindowOption.args.message, name
    wrt wsPromptWindowOption.args.options, options
    callRemote shellHandle, promptOptionIndex
    wrt index, wsPromptWindowOption.args.dest
    
    jmpZ skipLaunchableOption, isLaunchable
    jmpNE skipLaunchOption, index, 0
    launch fileHandle
    jmp menuLoop
    LBL skipLaunchOption
    dec index
    LBL skipLaunchableOption
    
    jmpE viewInfoOption, index, 0
    jmpE editAttrs, index, 1
    jmpE renameOption, index, 2
    # TODO: Handle other options.
    closeFile fileHandle
    ret
    
    LBL viewInfoOption
    newArgFrame displayFileInfo.argsSize
    wrt displayFileInfo.args.name, name
    wrt displayFileInfo.args.fileHandle, fileHandle
    call displayFileInfo
    jmp menuLoop
    
    LBL editAttrs
    newArgFrame editFileAttrs.argsSize
    wrt editFileAttrs.args.name, name
    wrt editFileAttrs.args.fileHandle, fileHandle
    call editFileAttrs
    wrt fileHandle, editFileAttrs.args.fileHandle
    fileType fileType, fileHandle
    jmp menuLoop
    
    LBL renameOption
    newArgFrame renameFile.argsSize
    wrt renameFile.args.name, name
    wrt renameFile.args.fileHandle, fileHandle
    call renameFile
    wrt name, renameFile.args.name
    wrt fileHandle, renameFile.args.fileHandle
    jmp menuLoop
END

FUNC displayFileInfo, 0, guarded
    ARG name, s32
    ARG fileHandle, s32
    
    VAR fileType, s8
    VAR typeTextStart, s32
    VAR typeTextEnd, s32
    fileType fileType, fileHandle
    jmpE handleBytecodeApp, fileType, 1
    jmpE handleSystemApp, fileType, 2
    wrt typeTextStart, ?genericFileTextStart
    wrt typeTextEnd, ?genericFileTextEnd
    jmp finishFileType
    LBL handleBytecodeApp
    wrt typeTextStart, ?bytecodeAppTextStart
    wrt typeTextEnd, ?bytecodeAppTextEnd
    jmp finishFileType
    LBL handleSystemApp
    wrt typeTextStart, ?systemAppTextStart
    wrt typeTextEnd, ?systemAppTextEnd
    LBL finishFileType
    
    VAR fileSize, s32
    VAR isGuarded, s8
    VAR isGuardedTextStart, s32
    VAR isGuardedTextEnd, s32
    fileSize fileSize, fileHandle
    fileIsGuarded isGuarded, fileHandle
    jmpNZ handleGuarded, isGuarded
    wrt isGuardedTextStart, ?notGuardedTextStart
    wrt isGuardedTextEnd, ?notGuardedTextEnd
    jmp skipGuarded
    LBL handleGuarded
    wrt isGuardedTextStart, ?guardedTextStart
    wrt isGuardedTextEnd, ?guardedTextEnd
    LBL skipGuarded
    
    VAR stringBuilder, s32
    VAR message, s32
    createStringBuilder stringBuilder
    addTextToString stringBuilder, name
    addCharToString stringBuilder, 10
    addAppDataToString stringBuilder, typeTextStart, typeTextEnd
    addCharToString stringBuilder, 10
    addIntToString stringBuilder, fileSize
    addAppDataToString stringBuilder, ?bytesTextStart, ?bytesTextEnd
    addCharToString stringBuilder, 10
    
    jmpZ skipPerm, fileType
    VAR hasAdminPerm, s8
    VAR permTextStart, s32
    VAR permTextEnd, s32
    hasAdminPerm hasAdminPerm, fileHandle
    jmpNZ handleAdminPerm, hasAdminPerm
    wrt permTextStart, ?noAdminPermTextStart
    wrt permTextEnd, ?noAdminPermTextEnd
    jmp skipAdminPerm
    LBL handleAdminPerm
    wrt permTextStart, ?hasAdminPermTextStart
    wrt permTextEnd, ?hasAdminPermTextEnd
    LBL skipAdminPerm
    addAppDataToString stringBuilder, permTextStart, permTextEnd
    addCharToString stringBuilder, 10
    LBL skipPerm
    
    addAppDataToString stringBuilder, isGuardedTextStart, isGuardedTextEnd
    finishString message, stringBuilder
    
    newArgFrame wsDisplayWindowMessage.argsSize
    wrt wsDisplayWindowMessage.args.window, window
    wrt wsDisplayWindowMessage.args.message, message
    callRemote shellHandle, displayMessageIndex
    delAlloc message
END

FUNC editFileAttrs, 0, guarded
    ARG name, s32
    ARG fileHandle, s32
    
    LBL menuLoop
    VAR fileType, s8
    VAR options, s32
    fileType fileType, fileHandle
    jmpNZ handlePermableOptions, fileType
    wrt options, attrOptions
    jmp skipPermableOptions
    LBL handlePermableOptions
    wrt options, permableOptions
    LBL skipPermableOptions
    
    VAR index, s8
    newArgFrame wsPromptWindowOption.argsSize
    wrt wsPromptWindowOption.args.window, window
    wrt wsPromptWindowOption.args.message, attrToEditTitle
    wrt wsPromptWindowOption.args.options, options
    callRemote shellHandle, promptOptionIndex
    wrt index, wsPromptWindowOption.args.dest
    
    jmpE editType, index, 0
    jmpNZ handlePermableOption, fileType
    jmpE editGuard, index, 1
    ret
    LBL handlePermableOption
    jmpE editPerm, index, 1
    jmpE editGuard, index, 2
    ret
    
    LBL editType
    newArgFrame editFileType.argsSize
    wrt editFileType.args.name, name
    wrt editFileType.args.fileHandle, fileHandle
    call editFileType
    wrt fileHandle, editFileType.args.fileHandle
    jmp menuLoop
    
    LBL editPerm
    newArgFrame editFilePerm.argsSize
    wrt editFilePerm.args.fileHandle, fileHandle
    call editFilePerm
    jmp menuLoop
    
    LBL editGuard
    newArgFrame editFileGuard.argsSize
    wrt editFileGuard.args.name, name
    wrt editFileGuard.args.fileHandle, fileHandle
    call editFileGuard
    wrt fileHandle, editFileGuard.args.fileHandle
    jmp menuLoop
END

FUNC editFileType, 0, guarded
    ARG name, s32
    ARG fileHandle, s32
    
    # TODO: Implement.
END

FUNC editFilePerm, 0, guarded
    ARG fileHandle, s32
    
    # TODO: Implement.
END

FUNC editFileGuard, 0, guarded
    ARG name, s32
    ARG fileHandle, s32
    
    # TODO: Implement.
END

FUNC renameFile, 0, guarded
    ARG name, s32
    ARG fileHandle, s32
    
    VAR newName, s32
    newArgFrame wsPromptWindowText.argsSize
    wrt wsPromptWindowText.args.window, window
    wrt wsPromptWindowText.args.message, renameTitle
    wrt wsPromptWindowText.args.startText, name
    callRemote shellHandle, promptTextIndex
    wrt newName, wsPromptWindowText.args.dest
    jmpNZ compareNames, newName
    ret
    
    LBL compareNames
    newArgFrame textIsEqual.argsSize
    wrt textIsEqual.args.text1, name
    wrt textIsEqual.args.text2, newName
    call textIsEqual
    jmpZ skipReturn, textIsEqual.args.dest
    ret
    LBL skipReturn
    
    VAR fileAttrs, s32
    VAR newFileHandle, s32
    getFileAttrs fileAttrs, fileHandle
    newArgFrame duplicateHelper.argsSize
    wrt duplicateHelper.args.fileHandle, fileHandle
    wrt duplicateHelper.args.name, newName
    wrt duplicateHelper.args.fileAttrs, fileAttrs
    call duplicateHelper
    wrt newFileHandle, duplicateHelper.args.dest
    
    delAlloc fileAttrs
    delAlloc name
    delFile fileHandle
    wrt name, newName
    wrt fileHandle, newFileHandle
    
    newArgFrame wsDisplayWindowMessage.argsSize
    wrt wsDisplayWindowMessage.args.window, window
    wrt wsDisplayWindowMessage.args.message, renamedMessage
    callRemote shellHandle, displayMessageIndex
END

FUNC duplicateHelper, 0, guarded
    ARG dest, s32
    ARG fileHandle, s32
    ARG name, s32
    ARG fileAttrs, s32
    
    VAR fileSize, s32
    VAR newFileHandle, s32
    fileSize fileSize, fileHandle
    newFile name, fileAttrs[0]:s8, fileAttrs[1]:s8, fileSize
    openFile newFileHandle, name
    
    jmpNZ handleAdminPerm, fileAttrs[2]:s8
    delAdminPerm newFileHandle
    jmp skipAdminPerm
    LBL handleAdminPerm
    giveAdminPerm newFileHandle
    LBL skipAdminPerm
    
    VAR buffer, s8, 500
    VAR index, s32
    VAR sizeToCopy, s32
    wrt index, 0
    LBL copyLoop
    sub sizeToCopy, fileSize, index
    jmpNG breakCopy, sizeToCopy, 0
    jmpNG skipClamp, sizeToCopy, 500
    wrt sizeToCopy, 500
    LBL skipClamp
    readFile buffer, fileHandle, index, sizeToCopy
    wrtFile newFileHandle, index, buffer, sizeToCopy
    add index, prevArg, sizeToCopy
    jmp copyLoop
    LBL breakCopy
    
    wrt dest, newFileHandle
END

FUNC displayVolUsage, 0, guarded
    VAR volSize, s32
    VAR volSizeUsed, s32
    VAR volSizeLeft, s32
    volSize volSize
    volSizeLeft volSizeLeft
    sub volSizeUsed, volSize, volSizeLeft
    
    VAR stringBuilder, s32
    VAR message, s32
    createStringBuilder stringBuilder
    addAppDataToString stringBuilder, ?spaceUsedTextStart, ?spaceUsedTextEnd
    addCharToString stringBuilder, 10
    addIntToString stringBuilder, volSizeUsed
    addAppDataToString stringBuilder, ?bytesTextStart, ?bytesTextEnd
    addCharToString stringBuilder, 10
    addAppDataToString stringBuilder, ?spaceFreeTextStart, ?spaceFreeTextEnd
    addCharToString stringBuilder, 10
    addIntToString stringBuilder, volSizeLeft
    addAppDataToString stringBuilder, ?bytesTextStart, ?bytesTextEnd
    finishString message, stringBuilder
    
    newArgFrame wsDisplayWindowMessage.argsSize
    wrt wsDisplayWindowMessage.args.window, window
    wrt wsDisplayWindowMessage.args.message, message
    callRemote shellHandle, displayMessageIndex
    delAlloc message
END

FUNC cleanUpAndQuit, 0, guarded
    VAR delWindowIndex, s32
    findFunc delWindowIndex, shellHandle, wsDelWindow.id
    newArgFrame wsDelWindow.argsSize
    wrt wsDelWindow.args.window, window
    callRemote shellHandle, delWindowIndex
    closeFile shellHandle
    quitApp
END

FUNC kill, wsKill.id, guarded
    call cleanUpAndQuit
END

FUNC reqDelWindow, wsReqDelWindow.id, guarded
    call cleanUpAndQuit
END

FUNC increaseStringSize, 0, guarded
    ARG stringBuilder, s32
    ARG sizeOffset, s32
    
    VAR size, s32
    VAR nextSize, s32
    VAR alloc, s32
    VAR allocSize, s32
    wrt size, stringBuilder[4]:s32
    add nextSize, size, sizeOffset
    wrt stringBuilder[4]:s32, nextSize
    wrt alloc, stringBuilder[0]:s32
    allocSize allocSize, alloc
    jmpG resizeAlloc, nextSize, allocSize
    ret
    
    LBL resizeAlloc
    VAR nextAlloc, s32
    VAR nextAllocSize, s32
    mul nextAllocSize, nextSize, 2
    newAlloc nextAlloc, guardedAllocAttr, nextAllocSize
    wrtBuff nextAlloc[0]:s8, alloc[0]:s8, size
    wrt stringBuilder[0]:s32, nextAlloc
    delAlloc alloc
END

FUNC addCharToString, 0, guarded
    ARG stringBuilder, s32
    ARG char, s8
    
    VAR index, s32
    wrt index, stringBuilder[4]:s32
    newArgFrame increaseStringSize.argsSize
    wrt increaseStringSize.args.stringBuilder, stringBuilder
    wrt increaseStringSize.args.sizeOffset, 1
    call increaseStringSize
    VAR alloc, s32
    wrt alloc, stringBuilder[0]:s32
    wrt alloc[index]:s8, char
END

FUNC addAppDataToString, 0, guarded
    ARG stringBuilder, s32
    ARG startOffset, s32
    ARG endOffset, s32
    
    VAR index, s32
    VAR size, s32
    wrt index, stringBuilder[4]:s32
    sub size, endOffset, startOffset
    newArgFrame increaseStringSize.argsSize
    wrt increaseStringSize.args.stringBuilder, stringBuilder
    wrt increaseStringSize.args.sizeOffset, size
    call increaseStringSize
    VAR alloc, s32
    wrt alloc, stringBuilder[0]:s32
    wrtBuff alloc[index]:s8, appData[startOffset]:s8, size
END

FUNC addTextToString, 0, guarded
    ARG stringBuilder, s32
    ARG text, s32
    
    VAR index, s32
    VAR size, s32
    wrt index, stringBuilder[4]:s32
    allocSize size, text
    newArgFrame increaseStringSize.argsSize
    wrt increaseStringSize.args.stringBuilder, stringBuilder
    wrt increaseStringSize.args.sizeOffset, size
    call increaseStringSize
    VAR alloc, s32
    wrt alloc, stringBuilder[0]:s32
    wrtBuff alloc[index]:s8, text[0]:s8, size
END

FUNC addIntToString, 0, guarded
    ARG stringBuilder, s32
    ARG number, s32
    
    VAR text, s32
    newArgFrame convertIntToText.argsSize
    wrt convertIntToText.args.number, number
    call convertIntToText
    wrt text, convertIntToText.args.dest
    newArgFrame addTextToString.argsSize
    wrt addTextToString.args.stringBuilder, stringBuilder
    wrt addTextToString.args.text, text
    call addTextToString
END

FUNC finishString, 0, guarded
    ARG dest, s32
    ARG stringBuilder, s32
    
    VAR alloc, s32
    VAR size, s32
    wrt alloc, stringBuilder[0]:s32
    wrt size, stringBuilder[4]:s32
    newAlloc dest, guardedAllocAttr, size
    wrtBuff dest[0]:s32, alloc[0]:s8, size
    delAlloc alloc
    delAlloc stringBuilder
END

# TODO: Consider moving this into a library.
FUNC convertIntToText, 0, guarded
    ARG dest, s32
    ARG number, s32
    
    VAR buffer, s8, 10
    VAR bufferOffset, s8
    VAR isNegative, s8
    VAR digitCount, s8
    
    jmpG handleNegative, 0, number
    jmpNZ skipZero, number
    newAlloc dest, guardedAllocAttr, 1
    wrt dest[0]:s8, 48
    ret
    LBL skipZero
    wrt isNegative, 0
    jmp skipNegative
    LBL handleNegative
    wrt isNegative, 1
    sub number, 0, number
    LBL skipNegative
    
    VAR digit, s8
    wrt digitCount, 0
    wrt bufferOffset, ?buffer + 10
    LBL digitLoop
    inc digitCount
    mod digit, number, 10
    add digit, prevArg, 48
    dec bufferOffset
    wrt localFrame[bufferOffset]:s8, digit
    div number, prevArg, 10
    jmpNZ digitLoop, number
    
    VAR destOffset, s8
    VAR destSize, s8
    jmpNZ handleHyphen, isNegative
    newAlloc dest, guardedAllocAttr, digitCount
    wrt destOffset, 0
    jmp skipHyphen
    LBL handleHyphen
    add destSize, digitCount, 1
    newAlloc dest, guardedAllocAttr, destSize
    wrt dest[0]:s8, 45
    wrt destOffset, 1
    LBL skipHyphen
    wrtBuff dest[destOffset]:s8, localFrame[bufferOffset]:s8, digitCount
END

FUNC textIsEqual, 0, guarded
    ARG dest, s8
    ARG text1, s32
    ARG text2, s32
    
    VAR size1, s32
    VAR size2, s32
    allocSize size1, text1
    allocSize size2, text2
    jmpNE notEqual, size1, size2
    
    VAR index, s32
    wrt index, 0
    LBL charLoop
    jmpNG breakChar, size1, index
    jmpNE notEqual, text1[index]:s8, text2[index]:s8
    inc index
    LBL breakChar
    wrt dest, 1
    ret
    
    LBL notEqual
    wrt dest, 0
END

APP_DATA
    LBL shellNameStart
    DATA "wsShell"
    LBL shellNameEnd
    LBL windowTitleStart
    DATA "File Manager"
    LBL windowTitleEnd
    LBL allFilesOptionStart
    DATA "All files"
    LBL allFilesOptionEnd
    LBL volUsageOptionStart
    DATA "Volume usage"
    LBL volUsageOptionEnd
    LBL spaceUsedTextStart
    DATA "Vol space used:"
    LBL spaceUsedTextEnd
    LBL spaceFreeTextStart
    DATA "Vol space free:"
    LBL spaceFreeTextEnd
    LBL bytesTextStart
    DATA " bytes"
    LBL bytesTextEnd
    LBL allFilesTitleStart
    DATA "All files:"
    LBL allFilesTitleEnd
    LBL launchOptionStart
    DATA "Launch"
    LBL launchOptionEnd
    LBL viewInfoOptionStart
    DATA "View info"
    LBL viewInfoOptionEnd
    LBL editAttrsOptionStart
    DATA "Edit attrs"
    LBL editAttrsOptionEnd
    LBL renameOptionStart
    DATA "Rename"
    LBL renameOptionEnd
    LBL duplicateOptionStart
    DATA "Duplicate"
    LBL duplicateOptionEnd
    LBL deleteOptionStart
    DATA "Delete"
    LBL deleteOptionEnd
    LBL genericFileTextStart
    DATA "Generic file"
    LBL genericFileTextEnd
    LBL bytecodeAppTextStart
    DATA "Bytecode app"
    LBL bytecodeAppTextEnd
    LBL systemAppTextStart
    DATA "System app"
    LBL systemAppTextEnd
    LBL hasAdminPermTextStart
    DATA "Has admin perm"
    LBL hasAdminPermTextEnd
    LBL noAdminPermTextStart
    DATA "No admin perm"
    LBL noAdminPermTextEnd
    LBL guardedTextStart
    DATA "Guarded"
    LBL guardedTextEnd
    LBL notGuardedTextStart
    DATA "Not guarded"
    LBL notGuardedTextEnd
    LBL renameTitleStart
    DATA "Enter new name:"
    LBL renameTitleEnd
    LBL renamedMessageStart
    DATA "Renamed file."
    LBL renamedMessageEnd
    LBL attrToEditTitleStart
    DATA "Attr to edit:"
    LBL attrToEditTitleEnd
    LBL typeOptionStart
    DATA "Type"
    LBL typeOptionEnd
    LBL permOptionStart
    DATA "Permission"
    LBL permOptionEnd
    LBL guardOptionStart
    DATA "Guard"
    LBL guardOptionEnd
END


