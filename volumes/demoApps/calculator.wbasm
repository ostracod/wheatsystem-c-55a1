
INCLUDE "../macros.wbasm"
INCLUDE "../utils.wbasm"
INCLUDE "../stringBuilder.wbasm"

# Floating-point number = [
#    s32 significand
#    s8 exponent
# ]
# Absolute value of significand must be between 0x20000000 and 0x3FFFFFFF inclusive.
# FP number value = (significand / 0x20000000) * 2^exponent

MACRO removeSign, dest, value
    jmpG @handleNegative, 0, value
    wrt dest, 0
    jmp @skipNegative
    LBL @handleNegative
    sub value, 0, value
    wrt dest, 1
    LBL @skipNegative
END

MACRO evaluateExpressionHelper, dest, precedence
    newArgFrame evaluateExpressionHelper.argsSize
    wrt evaluateExpressionHelper.args.expression, expression
    wrt evaluateExpressionHelper.args.expressionIndex, expressionIndex
    wrt evaluateExpressionHelper.args.precedence, precedence
    call evaluateExpressionHelper
    wrt dest, evaluateExpressionHelper.args.dest
    wrt expressionIndex, evaluateExpressionHelper.args.expressionIndex
END

VAR shellHandle, s32
VAR utilsHandle, s32
VAR displayMessageIndex, s32
VAR promptTextIndex, s32
VAR window, s32
VAR ten, s32
VAR errorStartOffset, s32
VAR errorEndOffset, s32

FUNC init, wsInit.id, guarded
    VAR shellName, s32
    newTextAlloc shellName, shellNameStart, shellNameEnd
    openFile shellHandle, shellName
    delAlloc shellName
    findFunc displayMessageIndex, shellHandle, wsDisplayWindowMessage.id
    findFunc promptTextIndex, shellHandle, wsPromptWindowText.id
    
    VAR utilsName, s32
    newTextAlloc utilsName, utilsNameStart, utilsNameEnd
    openFile utilsHandle, utilsName
    delAlloc utilsName
    launch utilsHandle
    initStringBuilderVars
    
    VAR newWindowIndex, s32
    findFunc newWindowIndex, shellHandle, wsNewWindow.id
    newArgFrame wsNewWindow.argsSize
    callRemote shellHandle, newWindowIndex
    wrt window, wsNewWindow.args.dest
    
    VAR promptMessage, s32
    newTextAlloc promptMessage, promptMessageStart, promptMessageEnd
    newAlloc ten, guardedAllocAttr, 5
    wrt ten[0]:s32, 0x28000000
    wrt ten[4]:s8, 3
    
    VAR message, s32
    VAR size, s16
    VAR err, s8
    setErrJmp handleErr
    
    LBL mainLoop
    VAR expression, s32
    newArgFrame wsPromptWindowText.argsSize
    wrt wsPromptWindowText.args.window, window
    wrt wsPromptWindowText.args.message, promptMessage
    callRemote shellHandle, promptTextIndex
    wrt expression, wsPromptWindowText.args.dest
    jmpZ mainLoop, expression
    
    VAR fpNumber, s32
    newArgFrame evaluateExpression.argsSize
    wrt evaluateExpression.args.expression, expression
    call evaluateExpression
    wrt fpNumber, evaluateExpression.args.dest
    
    jmp skipErr
    LBL handleErr
    clrErrJmp
    err err
    jmpE skipThrow, err, -1
    throw err
    LBL skipThrow
    sub size, errorEndOffset, errorStartOffset
    newAlloc message, guardedAllocAttr, size
    wrtBuff message[0]:s8, appData[errorStartOffset]:s8, size
    newArgFrame wsDisplayWindowMessage.argsSize
    wrt wsDisplayWindowMessage.args.window, window
    wrt wsDisplayWindowMessage.args.message, message
    callRemote shellHandle, displayMessageIndex
    delAlloc expression
    delAlloc message
    jmp mainLoop
    LBL skipErr
    
    VAR fpNumberText, s32
    newArgFrame convertFpNumberToText.argsSize
    wrt convertFpNumberToText.args.fpNumber, fpNumber
    call convertFpNumberToText
    wrt fpNumberText, convertFpNumberToText.args.dest
    
    VAR stringBuilder, s32
    createStringBuilder stringBuilder
    addTextToString stringBuilder, expression
    addAppDataToString stringBuilder, ?equalTextStart, ?equalTextEnd
    addTextToString stringBuilder, fpNumberText
    finishString message, stringBuilder
    
    newArgFrame wsDisplayWindowMessage.argsSize
    wrt wsDisplayWindowMessage.args.window, window
    wrt wsDisplayWindowMessage.args.message, message
    callRemote shellHandle, displayMessageIndex
    
    delAlloc expression
    delAlloc fpNumber
    delAlloc fpNumberText
    delAlloc message
    jmp mainLoop
END

FUNC evaluateExpression
    ARG dest, s32
    ARG expression, s32
    
    VAR expressionSize, s16
    allocSize expressionSize, expression
    
    newArgFrame evaluateExpressionHelper.argsSize
    wrt evaluateExpressionHelper.args.expression, expression
    wrt evaluateExpressionHelper.args.expressionIndex, 0
    wrt evaluateExpressionHelper.args.precedence, 99
    call evaluateExpressionHelper
    wrt dest, evaluateExpressionHelper.args.dest
    jmpE skipError, evaluateExpressionHelper.args.expressionIndex, expressionSize
    wrt errorStartOffset, ?badEndErrorStart
    wrt errorEndOffset, ?badEndErrorEnd
    throw -1
    LBL skipError
END

FUNC evaluateExpressionHelper
    ARG dest, s32
    ARG expression, s32
    ARG expressionIndex, s32
    ARG precedence, s8
    
    VAR expressionSize, s16
    allocSize expressionSize, expression
    jmpG skipErr, expressionSize, expressionIndex
    wrt errorStartOffset, ?malformedErrorStart
    wrt errorEndOffset, ?malformedErrorEnd
    throw -1
    LBL skipErr
    
    VAR char, s8
    wrt char, expression[expressionIndex]:s8
    jmpE handleDigit, char, 46
    jmpG skipDigit, char, 57
    jmpG handleDigit, char, 47
    LBL skipDigit
    jmpE handleNegation, char, 45
    jmpE handleParentheses, char, 40
    wrt errorStartOffset, ?badCharErrorStart
    wrt errorEndOffset, ?badCharErrorEnd
    throw -1
    
    LBL handleDigit
    newArgFrame parseFpNumber.argsSize
    wrt parseFpNumber.args.expression, expression
    wrt parseFpNumber.args.expressionIndex, expressionIndex
    call parseFpNumber
    wrt dest, parseFpNumber.args.dest
    wrt expressionIndex, parseFpNumber.args.expressionIndex
    jmp binaryOperatorLoop
    
    LBL handleNegation
    inc expressionIndex
    evaluateExpressionHelper dest, 2
    newArgFrame negateFpNumber.argsSize
    wrt negateFpNumber.args.fpNumber, dest
    call negateFpNumber
    delAlloc dest
    wrt dest, negateFpNumber.args.dest
    jmp binaryOperatorLoop
    
    LBL handleParentheses
    inc expressionIndex
    evaluateExpressionHelper dest, 99
    jmpNG throwErr2, expressionSize, expressionIndex
    wrt char, expression[expressionIndex]:s8
    inc expressionIndex
    jmpE skipErr2, char, 41
    LBL throwErr2
    wrt errorStartOffset, ?missingParenErrorStart
    wrt errorEndOffset, ?missingParenErrorEnd
    throw -1
    LBL skipErr2
    
    LBL binaryOperatorLoop
    jmpNG breakBinaryOperator, expressionSize, expressionIndex
    wrt char, expression[expressionIndex]:s8
    jmpNG skipPrecedence, precedence, 4
    jmpE handleAddition, char, 43
    jmpE handleSubtraction, char, 45
    LBL skipPrecedence
    jmpNG breakBinaryOperator, precedence, 3
    jmpE handleMultiplication, char, 42
    jmpE handleDivision, char, 47
    jmp breakBinaryOperator
    
    VAR operand, s32
    
    LBL handleAddition
    inc expressionIndex
    evaluateExpressionHelper operand, 4
    newArgFrame addFpNumbers.argsSize
    wrt addFpNumbers.args.fpNumber1, dest
    wrt addFpNumbers.args.fpNumber2, operand
    call addFpNumbers
    delAlloc dest
    wrt dest, addFpNumbers.args.dest
    delAlloc operand
    jmp binaryOperatorLoop
    
    LBL handleSubtraction
    inc expressionIndex
    evaluateExpressionHelper operand, 4
    newArgFrame subtractFpNumbers.argsSize
    wrt subtractFpNumbers.args.fpNumber1, dest
    wrt subtractFpNumbers.args.fpNumber2, operand
    call subtractFpNumbers
    delAlloc dest
    wrt dest, subtractFpNumbers.args.dest
    delAlloc operand
    jmp binaryOperatorLoop
    
    LBL handleMultiplication
    inc expressionIndex
    evaluateExpressionHelper operand, 3
    newArgFrame multiplyFpNumbers.argsSize
    wrt multiplyFpNumbers.args.fpNumber1, dest
    wrt multiplyFpNumbers.args.fpNumber2, operand
    call multiplyFpNumbers
    delAlloc dest
    wrt dest, multiplyFpNumbers.args.dest
    delAlloc operand
    jmp binaryOperatorLoop
    
    LBL handleDivision
    inc expressionIndex
    evaluateExpressionHelper operand, 3
    newArgFrame divideFpNumbers.argsSize
    wrt divideFpNumbers.args.fpNumber1, dest
    wrt divideFpNumbers.args.fpNumber2, operand
    call divideFpNumbers
    delAlloc dest
    wrt dest, divideFpNumbers.args.dest
    delAlloc operand
    jmp binaryOperatorLoop
    
    LBL breakBinaryOperator
END

FUNC parseFpNumber
    ARG dest, s32
    ARG expression, s32
    ARG expressionIndex, s16
    
    VAR char, s8
    VAR digit, s8
    VAR unit, s32
    VAR fpNumber, s32
    
    VAR expressionSize, s16
    VAR startIndex, s16
    allocSize expressionSize, expression
    wrt startIndex, expressionIndex
    
    LBL intLoop
    jmpNG breakInt, expressionSize, expressionIndex
    wrt char, expression[expressionIndex]:s8
    jmpG breakInt, 48, char
    jmpG breakInt, char, 57
    inc expressionIndex
    jmp intLoop
    LBL breakInt
    
    newAlloc dest, guardedAllocAttr, 5
    wrt dest[0]:s32, 0
    wrt dest[4]:s8, 0
    newAlloc unit, guardedAllocAttr, 5
    wrt unit[0]:s32, 0x20000000
    wrt unit[4]:s8, 0
    newAlloc fpNumber, guardedAllocAttr, 5
    
    VAR index, s16
    wrt index, expressionIndex
    LBL shiftLeftLoop
    jmpNG breakShiftLeft, index, startIndex
    dec index
    sub digit, expression[index]:s8, 48
    mul fpNumber[0]:s32, 0x08000000, digit
    wrt fpNumber[4]:s8, 2
    newArgFrame clampFpNumber.argsSize
    wrt clampFpNumber.args.fpNumber, fpNumber
    call clampFpNumber
    newArgFrame multiplyFpNumbers.argsSize
    wrt multiplyFpNumbers.args.fpNumber1, fpNumber
    wrt multiplyFpNumbers.args.fpNumber2, unit
    call multiplyFpNumbers
    delAlloc fpNumber
    wrt fpNumber, multiplyFpNumbers.args.dest
    newArgFrame addFpNumbers.argsSize
    wrt addFpNumbers.args.fpNumber1, dest
    wrt addFpNumbers.args.fpNumber2, fpNumber
    call addFpNumbers
    delAlloc dest
    wrt dest, addFpNumbers.args.dest
    newArgFrame multiplyFpNumbers.argsSize
    wrt multiplyFpNumbers.args.fpNumber1, unit
    wrt multiplyFpNumbers.args.fpNumber2, ten
    call multiplyFpNumbers
    delAlloc unit
    wrt unit, multiplyFpNumbers.args.dest
    jmp shiftLeftLoop
    LBL breakShiftLeft
    
    jmpNG cleanUp, expressionSize, expressionIndex
    wrt char, expression[expressionIndex]:s8
    jmpNE cleanUp, char, 46
    inc expressionIndex
    wrt unit[0]:s32, 0x33333333
    wrt unit[4]:s8, -4
    
    LBL shiftRightLoop
    jmpNG breakShiftRight, expressionSize, expressionIndex
    wrt char, expression[expressionIndex]:s8
    jmpG breakShiftRight, 48, char
    jmpG breakShiftRight, char, 57
    inc expressionIndex
    sub digit, char, 48
    mul fpNumber[0]:s32, 0x08000000, digit
    wrt fpNumber[4]:s8, 2
    newArgFrame clampFpNumber.argsSize
    wrt clampFpNumber.args.fpNumber, fpNumber
    call clampFpNumber
    newArgFrame multiplyFpNumbers.argsSize
    wrt multiplyFpNumbers.args.fpNumber1, fpNumber
    wrt multiplyFpNumbers.args.fpNumber2, unit
    call multiplyFpNumbers
    delAlloc fpNumber
    wrt fpNumber, multiplyFpNumbers.args.dest
    newArgFrame addFpNumbers.argsSize
    wrt addFpNumbers.args.fpNumber1, dest
    wrt addFpNumbers.args.fpNumber2, fpNumber
    call addFpNumbers
    delAlloc dest
    wrt dest, addFpNumbers.args.dest
    newArgFrame divideFpNumbers.argsSize
    wrt divideFpNumbers.args.fpNumber1, unit
    wrt divideFpNumbers.args.fpNumber2, ten
    call divideFpNumbers
    delAlloc unit
    wrt unit, divideFpNumbers.args.dest
    jmp shiftRightLoop
    LBL breakShiftRight
    
    LBL cleanUp
    delAlloc unit
    delAlloc fpNumber
END

FUNC addFpNumbers
    ARG dest, s32
    ARG fpNumber1, s32
    ARG fpNumber2, s32
    
    VAR significand1, s32
    VAR significand2, s32
    VAR exponent1, s8
    VAR exponent2, s8
    wrt significand1, fpNumber1[0]:s32
    wrt significand2, fpNumber2[0]:s32
    wrt exponent1, fpNumber1[4]:s8
    wrt exponent2, fpNumber2[4]:s8
    
    jmpNG skipSwap, exponent2, exponent1
    VAR tempSignificand, s32
    VAR tempExponent, s8
    wrt tempSignificand, significand1
    wrt significand1, significand2
    wrt significand2, tempSignificand
    wrt tempExponent, exponent1
    wrt exponent1, exponent2
    wrt exponent2, tempExponent
    LBL skipSwap
    
    LBL shiftLoop
    jmpNG breakShift, exponent1, exponent2
    div significand2, prevArg, 2
    inc exponent2
    jmp shiftLoop
    LBL breakShift
    
    VAR resultSignificand, s32
    VAR resultExponent, s8
    add resultSignificand, significand1, significand2
    wrt resultExponent, exponent1
    
    newAlloc dest, guardedAllocAttr, 5
    wrt dest[0]:s32, resultSignificand
    wrt dest[4]:s8, resultExponent
    newArgFrame clampFpNumber.argsSize
    wrt clampFpNumber.args.fpNumber, dest
    call clampFpNumber
END

FUNC negateFpNumber
    ARG dest, s32
    ARG fpNumber, s32
    
    newAlloc dest, guardedAllocAttr, 5
    sub dest[0]:s32, 0, fpNumber[0]:s32
    wrt dest[4]:s8, fpNumber[4]:s8
END

FUNC subtractFpNumbers
    ARG dest, s32
    ARG fpNumber1, s32
    ARG fpNumber2, s32
    
    VAR tempNumber, s32
    newArgFrame negateFpNumber.argsSize
    wrt negateFpNumber.args.fpNumber, fpNumber2
    call negateFpNumber
    wrt tempNumber, negateFpNumber.args.dest
    
    newArgFrame addFpNumbers.argsSize
    wrt addFpNumbers.args.fpNumber1, fpNumber1
    wrt addFpNumbers.args.fpNumber2, tempNumber
    call addFpNumbers
    wrt dest, addFpNumbers.args.dest
    delAlloc tempNumber
END

FUNC multiplyFpNumbers
    ARG dest, s32
    ARG fpNumber1, s32
    ARG fpNumber2, s32
    
    VAR significand1, s32
    VAR significand2, s32
    VAR exponent1, s8
    VAR exponent2, s8
    VAR isNegative1, s8
    VAR isNegative2, s8
    wrt significand1, fpNumber1[0]:s32
    wrt significand2, fpNumber2[0]:s32
    wrt exponent1, fpNumber1[4]:s8
    wrt exponent2, fpNumber2[4]:s8
    removeSign isNegative1, significand1
    removeSign isNegative2, significand2
    
    VAR resultSignificand, s32
    VAR mask, s32
    wrt resultSignificand, 0
    wrt mask, 0x20000000
    LBL shiftLoop
    VAR maskResult, s32
    bAnd maskResult, significand1, mask
    jmpZ skipAdd, maskResult
    add resultSignificand, prevArg, significand2
    LBL skipAdd
    bRight significand2, prevArg, 1
    bRight mask, prevArg, 1
    jmpNZ shiftLoop, significand2
    
    VAR resultIsNegative, s8
    VAR resultExponent, s8
    bXor resultIsNegative, isNegative1, isNegative2
    jmpZ skipNegate, resultIsNegative
    sub resultSignificand, 0, resultSignificand
    LBL skipNegate
    add resultExponent, exponent1, exponent2
    
    newAlloc dest, guardedAllocAttr, 5
    wrt dest[0]:s32, resultSignificand
    wrt dest[4]:s8, resultExponent
    newArgFrame clampFpNumber.argsSize
    wrt clampFpNumber.args.fpNumber, dest
    call clampFpNumber
END

FUNC divideFpNumbers
    ARG dest, s32
    ARG fpNumber1, s32
    ARG fpNumber2, s32
    
    VAR significand1, s32
    VAR significand2, s32
    VAR exponent1, s8
    VAR exponent2, s8
    VAR isNegative1, s8
    VAR isNegative2, s8
    wrt significand1, fpNumber1[0]:s32
    wrt significand2, fpNumber2[0]:s32
    wrt exponent1, fpNumber1[4]:s8
    wrt exponent2, fpNumber2[4]:s8
    removeSign isNegative1, significand1
    removeSign isNegative2, significand2
    
    jmpNZ skipError, significand2
    wrt errorStartOffset, ?zeroDivisionErrorStart
    wrt errorEndOffset, ?zeroDivisionErrorEnd
    throw -1
    LBL skipError
    
    VAR resultSignificand, s32
    VAR mask, s32
    wrt resultSignificand, 0
    wrt mask, 0x20000000
    LBL shiftLoop
    jmpG skipSub, significand2, significand1
    sub significand1, prevArg, significand2
    bOr resultSignificand, prevArg, mask
    LBL skipSub
    bRight significand2, prevArg, 1
    bRight mask, prevArg, 1
    jmpNZ shiftLoop, significand2
    
    VAR resultIsNegative, s8
    VAR resultExponent, s8
    bXor resultIsNegative, isNegative1, isNegative2
    jmpZ skipNegate, resultIsNegative
    sub resultSignificand, 0, resultSignificand
    LBL skipNegate
    sub resultExponent, exponent1, exponent2
    
    newAlloc dest, guardedAllocAttr, 5
    wrt dest[0]:s32, resultSignificand
    wrt dest[4]:s8, resultExponent
    newArgFrame clampFpNumber.argsSize
    wrt clampFpNumber.args.fpNumber, dest
    call clampFpNumber
END

FUNC clampFpNumber
    ARG fpNumber, s32
    
    VAR significand, s32
    VAR exponent, s8
    VAR isNegative, s8
    wrt significand, fpNumber[0]:s32
    wrt exponent, fpNumber[4]:s8
    removeSign isNegative, significand
    
    jmpNZ skipZero, significand
    ret
    LBL skipZero
    
    LBL shiftRightLoop
    jmpNG breakShiftRight, significand, 0x3FFFFFFF
    bRight significand, prevArg, 1
    inc exponent
    jmp shiftRightLoop
    LBL breakShiftRight
    
    LBL shiftLeftLoop
    jmpNG breakShiftLeft, 0x20000000, significand
    bLeft significand, prevArg, 1
    dec exponent
    jmp shiftLeftLoop
    LBL breakShiftLeft
    
    jmpZ skipNegate, isNegative
    sub significand, 0, significand
    LBL skipNegate
    
    wrt fpNumber[0]:s32, significand
    wrt fpNumber[4]:s8, exponent
END

# -1 indicates that fpNumber1 < fpNumber2
# 0 indicates that fpNumber1 == fpNumber2
# 1 indicates that fpNumber1 > fpNumber2
FUNC compareFpNumbers
    ARG dest, s8
    ARG fpNumber1, s32
    ARG fpNumber2, s32
    
    VAR significand1, s32
    VAR significand2, s32
    VAR exponent1, s8
    VAR exponent2, s8
    wrt significand1, fpNumber1[0]:s32
    wrt significand2, fpNumber2[0]:s32
    wrt exponent1, fpNumber1[4]:s8
    wrt exponent2, fpNumber2[4]:s8
    
    jmpG handlePositive, significand1, 0
    jmpG handleNegative, 0, significand1
    jmpG returnLessThan, significand2, 0
    jmpG returnGreaterThan, 0, significand2
    jmp returnEqual
    
    LBL handlePositive
    jmpG positivePositive, significand2, 0
    jmp returnGreaterThan
    
    LBL positivePositive
    jmpG returnGreaterThan, exponent1, exponent2
    jmpG returnLessThan, exponent2, exponent1
    jmpG returnGreaterThan, significand1, significand2
    jmpG returnLessThan, significand2, significand1
    jmp returnEqual
    
    LBL handleNegative
    jmpG negativeNegative, 0, significand2
    jmp returnLessThan
    
    LBL negativeNegative
    jmpG returnLessThan, exponent1, exponent2
    jmpG returnGreaterThan, exponent2, exponent1
    jmpG returnGreaterThan, significand1, significand2
    jmpG returnLessThan, significand2, significand1
    jmp returnEqual
    
    LBL returnLessThan
    wrt dest, -1
    ret
    LBL returnEqual
    wrt dest, 0
    ret
    LBL returnGreaterThan
    wrt dest, 1
END

FUNC convertFpNumberToText
    ARG dest, s32
    ARG fpNumber, s32
    
    VAR tempNumber, s32
    VAR isNegative, s8
    jmpG handleNegative, 0, fpNumber[0]:s32
    newAlloc tempNumber, guardedAllocAttr, 5
    wrtBuff tempNumber[0]:s8, fpNumber[0]:s8, 5
    wrt isNegative, 0
    jmp skipNegative
    LBL handleNegative
    newArgFrame negateFpNumber.argsSize
    wrt negateFpNumber.args.fpNumber, fpNumber
    call negateFpNumber
    wrt tempNumber, negateFpNumber.args.dest
    wrt isNegative, 1
    LBL skipNegative
    
    VAR unit, s32
    newAlloc unit, guardedAllocAttr, 5
    wrt unit[0]:s32, 0x20000000
    wrt unit[4]:s8, 0
    
    VAR index, s8
    VAR units, s32, 10
    VAR offset, s32
    VAR nextUnit, s32
    wrt units, unit
    wrt index, 0
    LBL shiftLeftLoop
    newArgFrame multiplyFpNumbers.argsSize
    wrt multiplyFpNumbers.args.fpNumber1, unit
    wrt multiplyFpNumbers.args.fpNumber2, ten
    call multiplyFpNumbers
    wrt nextUnit, multiplyFpNumbers.args.dest
    newArgFrame compareFpNumbers.argsSize
    wrt compareFpNumbers.args.fpNumber1, nextUnit
    wrt compareFpNumbers.args.fpNumber2, tempNumber
    call compareFpNumbers
    jmpG breakShiftLeft, compareFpNumbers.args.dest, 0
    wrt unit, nextUnit
    inc index
    mul offset, index, 4
    add offset, prevArg, ?units
    wrt localFrame[offset]:s32, unit
    jmp shiftLeftLoop
    LBL breakShiftLeft
    delAlloc nextUnit
    
    VAR text, s32
    VAR textIndex, s8
    newAlloc text, guardedAllocAttr, 30
    fillBuff text[0]:s8, 30, 35:s8
    jmpNZ handleHyphen, isNegative
    wrt textIndex, 0
    jmp skipHyphen
    LBL handleHyphen
    wrt text[0]:s8, 45
    wrt textIndex, 1
    LBL skipHyphen
    
    LBL digitLoop
    mul offset, index, 4
    add offset, prevArg, ?units
    wrt unit, localFrame[offset]:s32
    VAR digit, s8
    wrt digit, 48
    LBL subLoop
    jmpNG breakSub, 57, digit
    newArgFrame compareFpNumbers.argsSize
    wrt compareFpNumbers.args.fpNumber1, unit
    wrt compareFpNumbers.args.fpNumber2, tempNumber
    call compareFpNumbers
    jmpG breakSub, compareFpNumbers.args.dest, 0
    newArgFrame subtractFpNumbers.argsSize
    wrt subtractFpNumbers.args.fpNumber1, tempNumber
    wrt subtractFpNumbers.args.fpNumber2, unit
    call subtractFpNumbers
    delAlloc tempNumber
    wrt tempNumber, subtractFpNumbers.args.dest
    inc digit
    jmp subLoop
    LBL breakSub
    delAlloc unit
    wrt text[textIndex]:s8, digit
    inc textIndex
    dec index
    jmpNG digitLoop, 0, index
    
    VAR shouldAddPeriod, s8
    newAlloc unit, guardedAllocAttr, 5
    wrt unit[0]:s32, 0x33333333
    wrt unit[4]:s8, -4
    wrt shouldAddPeriod, 1
    LBL shiftRightLoop
    jmpZ breakShiftRight, tempNumber[0]:s32
    jmpNG breakShiftRight, tempNumber[4]:s8, -22
    jmpZ skipPeriod, shouldAddPeriod
    wrt text[textIndex]:s8, 46
    inc textIndex
    wrt shouldAddPeriod, 0
    LBL skipPeriod
    wrt digit, 48
    LBL subLoop2
    jmpNG breakSub2, 57, digit
    newArgFrame compareFpNumbers.argsSize
    wrt compareFpNumbers.args.fpNumber1, unit
    wrt compareFpNumbers.args.fpNumber2, tempNumber
    call compareFpNumbers
    jmpG breakSub2, compareFpNumbers.args.dest, 0
    newArgFrame subtractFpNumbers.argsSize
    wrt subtractFpNumbers.args.fpNumber1, tempNumber
    wrt subtractFpNumbers.args.fpNumber2, unit
    call subtractFpNumbers
    delAlloc tempNumber
    wrt tempNumber, subtractFpNumbers.args.dest
    inc digit
    jmp subLoop2
    LBL breakSub2
    wrt text[textIndex]:s8, digit
    inc textIndex
    newArgFrame divideFpNumbers.argsSize
    wrt divideFpNumbers.args.fpNumber1, unit
    wrt divideFpNumbers.args.fpNumber2, ten
    call divideFpNumbers
    delAlloc unit
    wrt unit, divideFpNumbers.args.dest
    jmpG shiftRightLoop, unit[4]:s8, -17
    LBL breakShiftRight
    
    newAlloc dest, guardedAllocAttr, textIndex
    wrtBuff dest[0]:s8, text[0]:s8, textIndex
    delAlloc tempNumber
    delAlloc unit
    delAlloc text
END

FUNC cleanUpAndQuit, 0, guarded
    VAR delWindowIndex, s32
    findFunc delWindowIndex, shellHandle, wsDelWindow.id
    newArgFrame wsDelWindow.argsSize
    wrt wsDelWindow.args.window, window
    callRemote shellHandle, delWindowIndex
    closeFile shellHandle
    closeFile utilsHandle
    quitApp
END

FUNC kill, wsKill.id, guarded
    call cleanUpAndQuit
END

FUNC reqDelWindow, wsReqDelWindow.id, guarded
    call cleanUpAndQuit
END

APP_DATA
    LBL shellNameStart
    DATA "wsShell"
    LBL shellNameEnd
    LBL utilsNameStart
    DATA "utils"
    LBL utilsNameEnd
    LBL promptMessageStart
    DATA "Enter expr:"
    LBL promptMessageEnd
    LBL equalTextStart
    DATA " = "
    LBL equalTextEnd
    LBL malformedErrorStart
    DATA "Malformed expression."
    LBL malformedErrorEnd
    LBL badCharErrorStart
    DATA "Unexpected character."
    LBL badCharErrorEnd
    LBL missingParenErrorStart
    DATA "Missing parenthesis."
    LBL missingParenErrorEnd
    LBL badEndErrorStart
    DATA "Unexpected end of expression."
    LBL badEndErrorEnd
    LBL zeroDivisionErrorStart
    DATA "Division by zero."
    LBL zeroDivisionErrorEnd
END


