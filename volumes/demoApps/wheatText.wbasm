
INCLUDE "../macros.wbasm"

MACRO getLineSize, dest, lineIndex
    mul offset, lineIndex, 4
    wrt line, lines[offset]:s32
    wrt dest, line[4]:s16
END

DEF keyBufferSize, 5

VAR shellHandle, s32
VAR wrtWindowTermIndex, s32
VAR promptOptionIndex, s32
VAR window, s32
VAR windowWidth, s16
VAR windowHeight, s16

VAR lines, s32
VAR lineCount, s16
VAR scrollLineIndex, s16
VAR scrollCharIndex, s16
VAR cursorLineIndex, s16
VAR cursorCharIndex, s16
VAR keyBuffer, s8, keyBufferSize
VAR keyIndex, s8
VAR lastKeyIndex, s8
VAR keyMutex, s32
VAR keyReadyGate, s32

VAR fileName, s32
VAR newFileTitle, s32
VAR openTitle, s32
VAR newFileOptions, s32
VAR oldFileOptions, s32

# Line = [
#    s32 pointer to text allocation
#    s16 text length
# ]

FUNC init, wsInit.id, guarded
    VAR shellName, s32
    newTextAlloc shellName, shellNameStart, shellNameEnd
    openFile shellHandle, shellName
    delAlloc shellName
    findFunc wrtWindowTermIndex, shellHandle, wsWrtWindowTerm.id
    findFunc promptOptionIndex, shellHandle, wsPromptWindowOption.id
    
    newAlloc lines, guardedAllocAttr, 20
    VAR line, s32
    newAlloc line, guardedAllocAttr, 6
    newAlloc line[0]:s32, guardedAllocAttr, 10
    wrt line[4]:s16, 0
    wrt lines[0]:s32, line
    wrt lineCount, 1
    
    wrt scrollLineIndex, 0
    wrt scrollCharIndex, 0
    wrt cursorLineIndex, 0
    wrt cursorCharIndex, 0
    wrt keyIndex, 0
    wrt lastKeyIndex, 0
    newGate keyMutex, 1
    newGate keyReadyGate, 1
    closeGate keyReadyGate
    
    VAR text, s32
    wrt fileName, null
    newTextAlloc newFileTitle, newFileTitleStart, newFileTitleEnd
    newTextAlloc openTitle, openTitleStart, openTitleEnd
    newAlloc newFileOptions, guardedAllocAttr, 8
    newAlloc oldFileOptions, guardedAllocAttr, 12
    newTextAlloc text, saveOptionStart, saveOptionEnd
    wrt oldFileOptions[0]:s32, text
    newTextAlloc text, saveAsOptionStart, saveAsOptionEnd
    wrt newFileOptions[0]:s32, text
    wrt oldFileOptions[4]:s32, text
    newTextAlloc text, openOptionStart, openOptionEnd
    wrt newFileOptions[4]:s32, text
    wrt oldFileOptions[8]:s32, text
    
    VAR newWindowIndex, s32
    findFunc newWindowIndex, shellHandle, wsNewWindow.id
    newArgFrame wsNewWindow.argsSize
    callRemote shellHandle, newWindowIndex
    wrt window, wsNewWindow.args.dest
    
    VAR windowSizeIndex, s32
    findFunc windowSizeIndex, shellHandle, wsWindowTermSize.id
    newArgFrame wsWindowTermSize.argsSize
    wrt wsWindowTermSize.args.window, window
    callRemote shellHandle, windowSizeIndex
    wrt windowWidth, wsWindowTermSize.args.widthDest
    wrt windowHeight, wsWindowTermSize.args.heightDest
    
    call runEditor
END

FUNC runEditor
    VAR line, s32
    VAR textSize, s16
    VAR nextIndex, s16
    VAR offset, s16
    
    LBL editorLoop
    call scrollToCursor
    call drawLines
    LBL keyLoop
    VAR key, s8
    waitGate keyMutex
    jmpNE handleKey, keyIndex, lastKeyIndex
    wrt key, 0
    jmp skipKey
    LBL handleKey
    inc lastKeyIndex
    jmpG skipWrap, keyBufferSize, lastKeyIndex
    wrt lastKeyIndex, 0
    LBL skipWrap
    add offset, ?keyBuffer, lastKeyIndex
    wrt key, globalFrame[offset]:s8
    LBL skipKey
    openGate keyMutex
    jmpNZ skipWait, key
    waitGate keyReadyGate
    jmp keyLoop
    LBL skipWait
    
    jmpE handleLeft, key, -1
    jmpE handleRight, key, -2
    jmpE handleUp, key, -3
    jmpE handleDown, key, -4
    jmpE handleReturn, key, 10
    jmpE handleDelete, key, 127
    jmpE handleEscape, key, 27
    jmpG keyLoop, 32, key
    newArgFrame insertChar.argsSize
    wrt insertChar.args.char, key
    call insertChar
    jmp editorLoop
    
    LBL handleLeft
    jmpZ handlePrevLine, cursorCharIndex
    dec cursorCharIndex
    jmp editorLoop
    LBL handlePrevLine
    jmpZ keyLoop, cursorLineIndex
    dec cursorLineIndex
    getLineSize textSize, cursorLineIndex
    wrt cursorCharIndex, textSize
    jmp editorLoop
    
    LBL handleRight
    getLineSize textSize, cursorLineIndex
    jmpNG handleNextLine, textSize, cursorCharIndex
    inc cursorCharIndex
    jmp editorLoop
    LBL handleNextLine
    add nextIndex, cursorLineIndex, 1
    jmpNG keyLoop, lineCount, nextIndex
    wrt cursorLineIndex, nextIndex
    wrt cursorCharIndex, 0
    jmp editorLoop
    
    LBL handleUp
    sub nextIndex, cursorCharIndex, windowWidth
    jmpG handleUnderflow, 0, nextIndex
    wrt cursorCharIndex, nextIndex
    jmp editorLoop
    LBL handleUnderflow
    jmpNZ handlePrevLine2, cursorLineIndex
    wrt cursorCharIndex, 0
    jmp editorLoop
    LBL handlePrevLine2
    dec cursorLineIndex
    getLineSize textSize, cursorLineIndex
    mod offset, textSize, windowWidth
    sub nextIndex, textSize, offset
    add cursorCharIndex, prevArg, nextIndex
    jmpNG editorLoop, cursorCharIndex, textSize
    wrt cursorCharIndex, textSize
    jmp editorLoop
    
    LBL handleDown
    add cursorCharIndex, prevArg, windowWidth
    getLineSize textSize, cursorLineIndex
    jmpNG editorLoop, cursorCharIndex, textSize
    add nextIndex, cursorLineIndex, 1
    jmpG handleNextLine2, lineCount, nextIndex
    wrt cursorCharIndex, textSize
    jmp editorLoop
    LBL handleNextLine2
    wrt cursorLineIndex, nextIndex
    mod cursorCharIndex, prevArg, windowWidth
    getLineSize textSize, cursorLineIndex
    jmpNG editorLoop, cursorCharIndex, textSize
    wrt cursorCharIndex, textSize
    jmp editorLoop
    
    LBL handleReturn
    call insertNewline
    jmp editorLoop
    
    LBL handleDelete
    call deleteChar
    jmp editorLoop
    
    LBL handleEscape
    call showMenu
    jmp editorLoop
END

FUNC insertChar
    ARG char, s8
    
    VAR line, s32
    VAR text, s32
    VAR textSize, s16
    VAR nextTextSize, s16
    VAR nextIndex, s16
    VAR allocSize, s16
    VAR offset, s16
    VAR size, s16
    
    mul offset, cursorLineIndex, 4
    wrt line, lines[offset]:s32
    wrt text, line[0]:s32
    wrt textSize, line[4]:s16
    allocSize allocSize, text
    add nextTextSize, textSize, 1
    
    jmpNG skipResize, nextTextSize, allocSize
    mul allocSize, prevArg, 2
    VAR nextText, s32
    newAlloc nextText, guardedAllocAttr, allocSize
    wrtBuff nextText[0]:s8, text[0]:s8, textSize
    delAlloc text
    wrt text, nextText
    wrt line[0]:s32, text
    LBL skipResize
    
    wrt textSize, nextTextSize
    wrt line[4]:s16, textSize
    add nextIndex, cursorCharIndex, 1
    sub size, textSize, nextIndex
    jmpZ skipMoveText, size
    wrtBuff text[nextIndex]:s8, text[cursorCharIndex]:s8, size
    LBL skipMoveText
    wrt text[cursorCharIndex]:s8, char
    wrt cursorCharIndex, nextIndex
END

FUNC insertNewline
    VAR offset1, s32
    VAR offset2, s32
    VAR offset3, s32
    VAR linesSize, s32
    VAR nextLinesSize, s32
    VAR allocSize, s32
    VAR sizeToMove, s32
    
    mul offset1, cursorLineIndex, 4
    add offset2, offset1, 4
    add offset3, offset2, 4
    mul linesSize, lineCount, 4
    add nextLinesSize, linesSize, 4
    allocSize allocSize, lines
    sub sizeToMove, linesSize, offset2
    
    jmpNG skipResize, nextLinesSize, allocSize
    mul allocSize, nextLinesSize, 2
    VAR nextLines, s32
    newAlloc nextLines, guardedAllocAttr, allocSize
    wrtBuff nextLines[0]:s8, lines[0]:s8, linesSize
    delAlloc lines
    wrt lines, nextLines
    LBL skipResize
    
    jmpZ skipMove, sizeToMove
    wrtBuff lines[offset3]:s8, lines[offset2]:s8, sizeToMove
    LBL skipMove
    VAR line, s32
    VAR lastText, s32
    VAR textSize, s16
    wrt line, lines[offset1]:s32
    wrt lastText, line[0]:s32
    sub textSize, line[4]:s16, cursorCharIndex
    wrt line[4]:s16, cursorCharIndex
    jmpG handleShortLine, 10, textSize
    wrt allocSize, textSize
    jmp skipShortLine
    LBL handleShortLine
    wrt allocSize, 10
    LBL skipShortLine
    VAR text, s32
    newAlloc line, guardedAllocAttr, 6
    newAlloc text, guardedAllocAttr, allocSize
    jmpZ skipCopy, textSize
    wrtBuff text[0]:s8, lastText[cursorCharIndex]:s8, textSize
    LBL skipCopy
    wrt line[0]:s32, text
    wrt line[4]:s16, textSize
    wrt lines[offset2]:s32, line
    inc lineCount
    inc cursorLineIndex
    wrt cursorCharIndex, 0
END

FUNC deleteChar
    VAR offset, s32
    VAR line, s32
    VAR text, s32
    VAR textSize, s16
    VAR prevIndex, s16
    VAR sizeToMove, s32
    mul offset, cursorLineIndex, 4
    wrt line, lines[offset]:s32
    wrt text, line[0]:s32
    wrt textSize, line[4]:s16
    jmpZ deleteNewline, cursorCharIndex
    sub prevIndex, cursorCharIndex, 1
    sub sizeToMove, textSize, cursorCharIndex
    jmpZ skipMove, sizeToMove
    wrtBuff text[prevIndex]:s8, text[cursorCharIndex]:s8, sizeToMove
    LBL skipMove
    dec textSize
    wrt line[4]:s16, textSize
    dec cursorCharIndex
    ret
    
    LBL deleteNewline
    jmpNZ skipReturn, cursorLineIndex
    ret
    LBL skipReturn
    VAR offset2, s32
    VAR line2, s32
    VAR text2, s32
    VAR textSize2, s16
    VAR nextTextSize, s16
    dec cursorLineIndex
    mul offset2, cursorLineIndex, 4
    wrt line2, lines[offset2]:s32
    wrt text2, line2[0]:s32
    wrt textSize2, line2[4]:s16
    wrt cursorCharIndex, textSize2
    
    add nextTextSize, textSize, textSize2
    VAR allocSize, s16
    allocSize allocSize, text2
    jmpNG skipResize, nextTextSize, allocSize
    mul allocSize, nextTextSize, 2
    VAR nextText, s32
    newAlloc nextText, guardedAllocAttr, allocSize
    wrtBuff nextText[0]:s8, text2[0]:s8, textSize2
    delAlloc text2
    wrt text2, nextText
    wrt line2[0]:s32, text2
    LBL skipResize
    
    jmpZ skipCopy, textSize
    wrtBuff text2[textSize2]:s8, text[0]:s8, textSize
    LBL skipCopy
    wrt line2[4]:s16, nextTextSize
    delAlloc text
    delAlloc line
    
    VAR offset3, s32
    VAR linesSize, s32
    add offset3, offset, 4
    mul linesSize, lineCount, 4
    sub sizeToMove, linesSize, offset3
    jmpZ skipMove2, sizeToMove
    wrtBuff lines[offset]:s8, lines[offset3]:s8, sizeToMove
    LBL skipMove2
    dec lineCount
END

FUNC showMenu
    LBL menuLoop
    VAR title, s32
    VAR options, s32
    jmpZ handleNewFileOptions, fileName
    wrt title, fileName
    wrt options, oldFileOptions
    jmp skipNewFileOptions
    LBL handleNewFileOptions
    wrt title, newFileTitle
    wrt options, newFileOptions
    LBL skipNewFileOptions
    
    VAR index, s8
    newArgFrame wsPromptWindowOption.argsSize
    wrt wsPromptWindowOption.args.window, window
    wrt wsPromptWindowOption.args.message, title
    wrt wsPromptWindowOption.args.options, options
    callRemote shellHandle, promptOptionIndex
    wrt index, wsPromptWindowOption.args.dest
    jmpZ skipOldFileOption, fileName
    jmpE handleSave, index, 0
    dec index
    LBL skipOldFileOption
    jmpE handleSaveAs, index, 0
    jmpE handleOpen, index, 1
    ret
    
    LBL handleSave
    ret
    
    LBL handleSaveAs
    ret
    
    LBL handleOpen
    call openFile
    jmp menuLoop
END

FUNC openFile
    VAR names, s32
    VAR index, s32
    VAR offset, s32
    allFileNames names
    newArgFrame wsPromptWindowOption.argsSize
    wrt wsPromptWindowOption.args.window, window
    wrt wsPromptWindowOption.args.message, openTitle
    wrt wsPromptWindowOption.args.options, names
    callRemote shellHandle, promptOptionIndex
    wrt index, wsPromptWindowOption.args.dest
    jmpG cleanUp, 0, index
    
    VAR name, s32
    mul offset, index, 4
    wrt name, names[offset]:s32
    # TODO: Open the file.
    
    LBL cleanUp
    allocSize offset, names
    LBL deleteLoop
    sub offset, prevArg, 4
    delAlloc names[offset]:s32
    jmpNZ deleteLoop, offset
    delAlloc names
END

FUNC scrollToCursor
    VAR offset, s16
    VAR line, s32
    VAR textSize, s16
    
    jmpG skipScroll, cursorLineIndex, scrollLineIndex
    jmpG handleScroll, scrollLineIndex, cursorLineIndex
    jmpNG skipScroll, scrollCharIndex, cursorCharIndex
    LBL handleScroll
    wrt scrollLineIndex, cursorLineIndex
    mod offset, cursorCharIndex, windowWidth
    sub scrollCharIndex, cursorCharIndex, offset
    ret
    LBL skipScroll
    
    VAR startLineIndex, s16
    VAR startCharIndex, s16
    VAR posY, s16
    wrt startLineIndex, cursorLineIndex
    mod offset, cursorCharIndex, windowWidth
    sub startCharIndex, cursorCharIndex, offset
    sub posY, windowHeight, 1
    LBL findStartLoop
    jmpZ breakFindStart, posY
    jmpZ handlePrevLine, startCharIndex
    sub startCharIndex, prevArg, windowWidth
    jmp skipPrevLine
    LBL handlePrevLine
    jmpZ breakFindStart, startLineIndex
    dec startLineIndex
    getLineSize textSize, startLineIndex
    mod offset, textSize, windowWidth
    sub startCharIndex, textSize, offset
    LBL skipPrevLine
    dec posY
    jmp findStartLoop
    LBL breakFindStart
    
    jmpG skipScroll2, scrollLineIndex, startLineIndex
    jmpG handleScroll2, startLineIndex, scrollLineIndex
    jmpNG skipScroll2, startCharIndex, scrollCharIndex
    LBL handleScroll2
    wrt scrollLineIndex, startLineIndex
    wrt scrollCharIndex, startCharIndex
    LBL skipScroll2
END

FUNC drawLines
    VAR offset, s32
    VAR size, s16
    
    VAR lineIndex, s16
    VAR charIndex, s16
    VAR windowLine, s32
    VAR posY, s16
    wrt lineIndex, scrollLineIndex
    wrt charIndex, scrollCharIndex
    newAlloc windowLine, guardedAllocAttr, windowWidth
    wrt posY, 0
    
    LBL drawLoop
    fillBuff windowLine[0]:s8, windowWidth, 32:s8
    
    VAR line, s32
    VAR text, s32
    VAR textSize, s16
    VAR nextCharIndex, s16
    jmpG handleLine, lineCount, lineIndex
    wrt line, 0
    jmp skipLine
    LBL handleLine
    mul offset, lineIndex, 4
    wrt line, lines[offset]:s32
    wrt text, line[0]:s32
    wrt textSize, line[4]:s16
    add nextCharIndex, charIndex, windowWidth
    jmpG handleOverflow, nextCharIndex, textSize
    wrt offset, nextCharIndex
    jmp skipOverflow
    LBL handleOverflow
    wrt offset, textSize
    LBL skipOverflow
    sub size, offset, charIndex
    jmpZ skipCopy, size
    wrtBuff windowLine[0]:s8, text[charIndex]:s8, size
    LBL skipCopy
    jmpNE skipCursor, lineIndex, cursorLineIndex
    jmpG skipCursor, charIndex, cursorCharIndex
    jmpNG skipCursor, nextCharIndex, cursorCharIndex
    sub offset, cursorCharIndex, charIndex
    wrt windowLine[offset]:s8, 95
    LBL skipCursor
    LBL skipLine
    
    newArgFrame wsWrtWindowTerm.argsSize
    wrt wsWrtWindowTerm.args.window, window
    wrt wsWrtWindowTerm.args.x, 0
    wrt wsWrtWindowTerm.args.y, posY
    wrt wsWrtWindowTerm.args.text, windowLine
    callRemote shellHandle, wrtWindowTermIndex
    
    jmpZ skipAdvance, line
    wrt charIndex, nextCharIndex
    jmpNG skipAdvance, charIndex, textSize
    wrt charIndex, 0
    inc lineIndex
    LBL skipAdvance
    inc posY
    jmpG drawLoop, windowHeight, posY
    
    delAlloc windowLine
END

FUNC windowKeyPressed, wsWindowKeyPressed.id, guarded
    ARG window, s32
    ARG key, s8
    
    waitGate keyMutex
    inc keyIndex
    jmpG skipWrap, keyBufferSize, keyIndex
    wrt keyIndex, 0
    LBL skipWrap
    VAR offset, s16
    add offset, ?keyBuffer, keyIndex
    wrt globalFrame[offset]:s8, key
    openGate keyMutex
    openGate keyReadyGate
END

FUNC cleanUpAndQuit, 0, guarded
    VAR delWindowIndex, s32
    findFunc delWindowIndex, shellHandle, wsDelWindow.id
    newArgFrame wsDelWindow.argsSize
    wrt wsDelWindow.args.window, window
    callRemote shellHandle, delWindowIndex
    closeFile shellHandle
    quitApp
END

FUNC kill, wsKill.id, guarded
    call cleanUpAndQuit
END

FUNC reqDelWindow, wsReqDelWindow.id, guarded
    call cleanUpAndQuit
END

APP_DATA
    LBL shellNameStart
    DATA "wsShell"
    LBL shellNameEnd
    LBL newFileTitleStart
    DATA "New file"
    LBL newFileTitleEnd
    LBL saveOptionStart
    DATA "Save"
    LBL saveOptionEnd
    LBL saveAsOptionStart
    DATA "Save as..."
    LBL saveAsOptionEnd
    LBL openOptionStart
    DATA "Open"
    LBL openOptionEnd
    LBL openTitleStart
    DATA "Open file:"
    LBL openTitleEnd
END


