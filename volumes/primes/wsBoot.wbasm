
INCLUDE "../macros.wbasm"

DEF termTextSize, 6

FUNC isPrime
    
    ARG isPrime, s8
    ARG number, s16
    VAR factor, s16
    VAR remainder, s16
    
    wrt isPrime, 1
    wrt factor, 2
    LBL checkFactorLoop
    
    jmpG retSkip, number, factor
    ret
    LBL retSkip
    mod remainder, number, factor
    jmpNZ registerCompositeSkip, remainder
    wrt isPrime, 0
    ret
    LBL registerCompositeSkip
    
    inc factor
    jmp checkFactorLoop
END

FUNC init, wsInit.id
    
    VAR termName, s32
    VAR termHandle, s32
    VAR wrtTermIndex, s32
    newTextAlloc termName, termNameStart, termNameEnd
    openFile termHandle, termName
    launch termHandle
    findFunc wrtTermIndex, termHandle, wsWrtTerm.id
    
    VAR number, s16
    VAR termText, s32
    newAlloc termText, 0, termTextSize
    
    wrt number, 2
    LBL loop
    
    newArgFrame isPrime.argsSize
    wrt isPrime.args.number, number
    call isPrime
    jmpZ printSkip, isPrime.args.isPrime
    
    VAR termTextIndex, s8
    VAR unitPlace, s32
    VAR tempNumber, s16
    VAR termDigit, s8
    VAR condition, s8
    
    wrt termTextIndex, 0
    wrt unitPlace, 100000
    wrt tempNumber, number
    
    LBL digitLoop
    div termDigit, tempNumber, unitPlace
    add termText[termTextIndex]:s8, 48, termDigit
    mod tempNumber, prevArg, unitPlace
    div unitPlace, prevArg, 10
    inc termTextIndex
    jmpG digitLoop, termTextSize, termTextIndex
    
    newArgFrame wsWrtTerm.argsSize
    wrt wsWrtTerm.args.x, 0
    wrt wsWrtTerm.args.y, 0
    wrt wsWrtTerm.args.text, termText
    callRemote termHandle, wrtTermIndex
    
    LBL printSkip
    inc number
    jmp loop
END

APP_DATA
    LBL termNameStart
    DATA "wsTerm"
    LBL termNameEnd
END


